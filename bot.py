import asyncio
import logging
import sys
from pathlib import Path
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from config.settings import settings
from database.session import init_db, engine
from services.lock_system import InstanceLock
from typing import Dict, Any, List, Tuple, Optional

Path("logs").mkdir(exist_ok=True)
logging.basicConfig(
    level=logging.DEBUG,  # <- –ò–ó–ú–ï–ù–ò–¢–ï —Å INFO –Ω–∞ DEBUG
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("logs/bot_errors.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class Form(StatesGroup):
    select_channel = State()
    select_duration = State()
    enter_media = State()
    enter_text = State()

class MessageCleaner:
    def __init__(self):
        self.user_messages = {}
        self.bot_messages = {}

    async def add_message(self, chat_id: int, message_id: int, is_bot: bool = False):
        target = self.bot_messages if is_bot else self.user_messages
        if chat_id not in target:
            target[chat_id] = []
        target[chat_id].append(message_id)

    async def clean_chat(self, bot: Bot, chat_id: int):
        for messages in [self.user_messages, self.bot_messages]:
            if chat_id in messages:
                for msg_id in messages[chat_id]:
                    try:
                        await bot.delete_message(chat_id, msg_id)
                    except Exception:
                        pass
                messages[chat_id] = []

async def on_startup(bot: Bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    try:
        await bot.send_message(
            settings.ADMIN_IDS[0], 
            "üü¢ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω\n"
            f"–í–µ—Ä—Å–∏—è: 2.1\n"
            f"–ê–¥–º–∏–Ω–æ–≤: {len(settings.ADMIN_IDS)}"
        )
        init_db()
    except Exception as e:
        logger.error(f"Startup error: {e}")

async def on_shutdown(bot: Bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    try:
        await engine.dispose()
        await bot.send_message(settings.ADMIN_IDS[0], "üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"Shutdown error: {e}")
    finally:
        await bot.session.close()

async def show_loading(bot: Bot, chat_id: int, text: str = "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...") -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID"""
    msg = await bot.send_message(chat_id, text)
    return msg.message_id

async def setup_routers(dp: Dispatcher, bot: Bot, cleaner: MessageCleaner, show_loading_func):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    @dp.message(Command("start", "help"))
    async def cmd_start(message: types.Message, state: FSMContext):
        try:
            await state.clear()
            await cleaner.clean_chat(bot, message.chat.id)
            
            builder = ReplyKeyboardBuilder()
            buttons = [
                "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É",
                "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
                "üí∞ –ë–∞–ª–∞–Ω—Å",
                "üÜò –ü–æ–º–æ—â—å",
                "‚óÄÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é"
            ]
            
            for button in buttons[:-1]:
                builder.add(types.KeyboardButton(text=button))
            builder.adjust(2, 2, 1)
            
            if message.from_user.id in settings.ADMIN_IDS:
                builder.row(types.KeyboardButton(text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
            
            msg = await message.answer(
                "üîπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=builder.as_markup(resize_keyboard=True)
            )
            await cleaner.add_message(message.chat.id, msg.message_id)
        except Exception as e:
            logger.error(f"Start command error: {e}")
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    @dp.message(F.text == "‚óÄÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é")
    async def back_to_main(message: types.Message, state: FSMContext):
        await cmd_start(message, state)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É"
    @dp.message(F.text == "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É")
    async def start_advert(message: types.Message, state: FSMContext):
        try:
            await cleaner.clean_chat(bot, message.chat.id)
            load_msg_id = await show_loading_func(bot, message.chat.id)
            
            builder = ReplyKeyboardBuilder()
            for channel in settings.CHANNELS:
                builder.add(types.KeyboardButton(text=channel))
            builder.adjust(2)
            builder.row(types.KeyboardButton(text="‚óÄÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é"))
            
            await bot.delete_message(message.chat.id, load_msg_id)
            msg = await message.answer(
                "üì¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Ä–µ–∫–ª–∞–º—ã:",
                reply_markup=builder.as_markup(resize_keyboard=True)
            )
            await cleaner.add_message(message.chat.id, msg.message_id)
            await state.set_state(Form.select_channel)
        except Exception as e:
            logger.error(f"Advert start error: {e}")
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞
    @dp.message(Form.select_channel, F.text.in_(settings.CHANNELS))
    async def select_channel(message: types.Message, state: FSMContext):
        try:
            await cleaner.clean_chat(bot, message.chat.id)
            load_msg_id = await show_loading(bot, message.chat.id)
            
            builder = ReplyKeyboardBuilder()
            for duration, price in settings.PRICES.items():
                builder.add(types.KeyboardButton(
                    text=f"{duration} - {price['amount']} —Ä—É–±"
                ))
            builder.adjust(2)
            builder.row(types.KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥"))
            
            await bot.delete_message(message.chat.id, load_msg_id)
            msg = await message.answer(
                f"–í—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª: {message.text}\n"
                "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:",
                reply_markup=builder.as_markup(resize_keyboard=True)
            )
            await cleaner.add_message(message.chat.id, msg.message_id)
            await state.update_data(channel=message.text)
            await state.set_state(Form.select_duration)
        except Exception as e:
            logger.error(f"Channel select error: {e}")
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–Ω–∞–ª–∞")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–Ω–∞–ª–∞
    @dp.message(Form.select_channel, F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
    async def back_from_channels(message: types.Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
               await state.clear()
               await cmd_start(message, state)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞
    @dp.message(Form.select_duration)
    async def select_duration(message: types.Message, state: FSMContext):
        try:
            selected_text = message.text.split(' - ')[0]
            
            if selected_text in settings.PRICES:
                await cleaner.clean_chat(bot, message.chat.id)
                price = settings.PRICES[selected_text]
                await state.update_data(
                    duration=selected_text,
                    price=price['amount']
                )
                
                builder = ReplyKeyboardBuilder()
                builder.add(types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
                builder.row(types.KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥"))
                
                msg = await message.answer(
                    f"üìå –í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
                    f"–ö–∞–Ω–∞–ª: {(await state.get_data())['channel']}\n"
                    f"–°—Ä–æ–∫: {selected_text}\n"
                    f"–¶–µ–Ω–∞: {price['amount']} —Ä—É–±\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
                    reply_markup=builder.as_markup(resize_keyboard=True)
                )
                await cleaner.add_message(message.chat.id, msg.message_id)
                await state.set_state(Form.enter_media)
            else:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        except Exception as e:
            logger.error(f"Duration select error: {e}")
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ä–æ–∫–∞")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞
    @dp.message(Form.enter_media, F.content_type.in_({'photo', 'video'}))
    async def handle_media(message: types.Message, state: FSMContext):
        try:
            if message.photo:
                media_id = message.photo[-1].file_id
                media_type = "photo"
            elif message.video:
                media_id = message.video.file_id
                media_type = "video"
            
            await state.update_data(media_id=media_id, media_type=media_type)
            await cleaner.clean_chat(bot, message.chat.id)
            
            msg = await message.answer(
                "–ú–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤):",
                reply_markup=types.ReplyKeyboardRemove()
            )
            await cleaner.add_message(message.chat.id, msg.message_id)
            await state.set_state(Form.enter_text)
        except Exception as e:
            logger.error(f"Media handling error: {e}")
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞")

    # –ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞
    @dp.message(Form.enter_media, F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    async def skip_media(message: types.Message, state: FSMContext):
        await cleaner.clean_chat(bot, message.chat.id)
        msg = await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await cleaner.add_message(message.chat.id, msg.message_id)
        await state.set_state(Form.enter_text)

    # –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å—Ä–æ–∫–∞
    @dp.message(Form.enter_media, F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
    async def back_from_media(message: types.Message, state: FSMContext):
        data = await state.get_data()
        await cleaner.clean_chat(bot, message.chat.id)
        
        builder = ReplyKeyboardBuilder()
        for duration, price in settings.PRICES.items():
            builder.add(types.KeyboardButton(
                text=f"{duration} - {price['amount']} —Ä—É–±"
            ))
        builder.adjust(2)
        builder.row(types.KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥"))
        
        msg = await message.answer(
            f"–í—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª: {data['channel']}\n"
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )
        await cleaner.add_message(message.chat.id, msg.message_id)
        await state.set_state(Form.select_duration)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    @dp.message(Form.enter_text)
    async def enter_ad_text(message: types.Message, state: FSMContext):
        try:
            if len(message.text) > 1000:
                await message.answer("–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)")
                return
            
            data = await state.get_data()
            await cleaner.clean_chat(bot, message.chat.id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            ad_text = (
                f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n"
                f"–ö–∞–Ω–∞–ª: {data['channel']}\n"
                f"–°—Ä–æ–∫: {data['duration']}\n"
                f"–¶–µ–Ω–∞: {data['price']} —Ä—É–±\n\n"
                f"–¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n{message.text}\n\n"
                "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å —Ç–µ–∫—Å—Ç–æ–º
            if 'media_id' in data:
                if data['media_type'] == 'photo':
                    await bot.send_photo(
                        chat_id=message.chat.id,
                        photo=data['media_id'],
                        caption=ad_text
                    )
                elif data['media_type'] == 'video':
                    await bot.send_video(
                        chat_id=message.chat.id,
                        video=data['media_id'],
                        caption=ad_text
                    )
            else:
                # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await message.answer(ad_text)
            
            await state.clear()
            
        except Exception as e:
            logger.error(f"Ad text error: {e}")
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    @dp.message(F.text.in_(["üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", "üí∞ –ë–∞–ª–∞–Ω—Å", "üÜò –ü–æ–º–æ—â—å"]))
    async def handle_menu_buttons(message: types.Message):
        try:
            await cleaner.clean_chat(bot, message.chat.id)
            if message.text == "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è":
                response = "üìã –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n(–∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π)"
            elif message.text == "üí∞ –ë–∞–ª–∞–Ω—Å":
                response = "üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: 0 —Ä—É–±\n–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å: /payment"
            elif message.text == "üÜò –ü–æ–º–æ—â—å":
                response = ("üÜò –ü–æ–º–æ—â—å:\n"
                          "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                          "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
                          "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @support")
            
            msg = await message.answer(response)
            await cleaner.add_message(message.chat.id, msg.message_id)
        except Exception as e:
            logger.error(f"Menu button error: {e}")
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    lock = InstanceLock()
    if not lock.acquire():
        logger.critical("Another instance is already running. Exiting.")
        return

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        bot = Bot(
            token=settings.BOT_TOKEN,
            default=DefaultBotProperties(parse_mode="HTML")
        )
        dp = Dispatcher(storage=MemoryStorage())
        cleaner = MessageCleaner()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—É—Ç–µ—Ä–æ–≤
        await setup_routers(dp, bot, cleaner, show_loading)

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ startup/shutdown
        dp.startup.register(on_startup)
        dp.shutdown.register(on_shutdown)
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.critical(f"Fatal error: {e}", exc_info=True)
    finally:
        lock.release()
        if 'bot' in locals():
            await bot.session.close()

if __name__ == "__main__":
    if not Path(".env").exists():
        print("–û–®–ò–ë–ö–ê: –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Ç–æ–∫–µ–Ω–æ–º!")
        sys.exit(1)

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.critical(f"Unexpected error: {e}")