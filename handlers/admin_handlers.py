from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.types import ReplyKeyboardRemove

from services.message_cleaner import MessageCleaner
from config import settings
from database.session import get_db
from database.models import User, Ad
from sqlalchemy import select, func
from datetime import datetime, timedelta
import logging
import asyncio

admin_router = Router(name='admin_router')
logger = logging.getLogger(__name__)

async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id in settings.ADMIN_IDS

def get_admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    builder = ReplyKeyboardBuilder()
    builder.row(types.KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    builder.row(types.KeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞"))
    builder.row(types.KeyboardButton(text="‚úÖ –ú–æ–¥–µ—Ä–∞—Ü–∏—è"))
    builder.row(types.KeyboardButton(text="‚óÄÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é"))
    return builder.as_markup(resize_keyboard=True)

def get_main_keyboard(is_admin: bool = False):
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    builder = ReplyKeyboardBuilder()
    builder.row(types.KeyboardButton(text="üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É"))
    builder.row(
        types.KeyboardButton(text="üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"),
        types.KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å")
    )
    builder.row(types.KeyboardButton(text="üÜò –ü–æ–º–æ—â—å"))
    if is_admin:
        builder.row(types.KeyboardButton(text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
    return builder.as_markup(resize_keyboard=True)

@admin_router.message(F.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
@admin_router.message(Command("admin"))
async def admin_panel(message: types.Message, cleaner: MessageCleaner):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not await is_admin(message.from_user.id):
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
    
    await cleaner.clean_chat(message.bot, message.chat.id)
    await message.answer(
        "üõ†Ô∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )

@admin_router.message(F.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message, cleaner: MessageCleaner):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    if not await is_admin(message.from_user.id):
        return
    
    await cleaner.clean_chat(message.bot, message.chat.id)
    db = next(get_db())
    
    try:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_users = db.scalar(select(func.count(User.id)))
        total_ads = db.scalar(select(func.count(Ad.id)))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        day_ago = datetime.utcnow() - timedelta(days=1)
        new_users = db.scalar(select(func.count(User.id)).where(User.created_at >= day_ago))
        active_users = db.scalar(select(func.count(User.id)).where(User.last_activity >= day_ago))
        
        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
            f"üÜï –ù–æ–≤—ã—Ö –∑–∞ —Å—É—Ç–∫–∏: <b>{new_users}</b>\n"
            f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö: <b>{active_users}</b>\n\n"
            f"üì¢ –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: <b>{total_ads}</b>\n"
            f"‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: <b>{db.scalar(select(func.count(Ad.id)).where(Ad.status == 'pending'))}</b>"
        )
        
        await message.answer(text)
    except Exception as e:
        logger.error(f"Stats error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@admin_router.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def start_broadcast(message: types.Message, state: FSMContext, cleaner: MessageCleaner):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not await is_admin(message.from_user.id):
        return
    
    await cleaner.clean_chat(message.bot, message.chat.id)
    await message.answer(
        "üì¢ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state("broadcast")

@admin_router.message(StateFilter("broadcast"))
async def process_broadcast(message: types.Message, state: FSMContext, cleaner: MessageCleaner):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    db = next(get_db())
    users = db.scalars(select(User)).all()
    
    success = failed = 0
    progress_msg = await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    await cleaner.add_message(message.chat.id, progress_msg.message_id)
    
    for user in users:
        try:
            if message.photo:
                await message.bot.send_photo(
                    chat_id=user.telegram_id,
                    photo=message.photo[-1].file_id,
                    caption=message.caption
                )
            elif message.video:
                await message.bot.send_video(
                    chat_id=user.telegram_id,
                    video=message.video.file_id,
                    caption=message.caption
                )
            else:
                await message.send_copy(user.telegram_id)
            success += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {user.telegram_id}: {e}")
            failed += 1
        await asyncio.sleep(0.1)
    
    await progress_msg.edit_text(
        f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}"
    )
    await state.clear()
    await admin_panel(message, cleaner)

@admin_router.message(F.text == "‚úÖ –ú–æ–¥–µ—Ä–∞—Ü–∏—è")
async def moderate_ads(message: types.Message, cleaner: MessageCleaner):
    """–ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    if not await is_admin(message.from_user.id):
        return
    
    await cleaner.clean_chat(message.bot, message.chat.id)
    db = next(get_db())
    
    ads = db.scalars(
        select(Ad)
        .where(Ad.status == "pending")
        .order_by(Ad.created_at.desc())
        .limit(5)
    ).all()
    
    if not ads:
        return await message.answer("‚ÑπÔ∏è –ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
    
    builder = InlineKeyboardBuilder()
    for ad in ads:
        builder.row(
            types.InlineKeyboardButton(
                text=f"‚úÖ –û–¥–æ–±—Ä–∏—Ç—å #{ad.id}",
                callback_data=f"approve_{ad.id}"),
            types.InlineKeyboardButton(
                text=f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å #{ad.id}",
                callback_data=f"reject_{ad.id}")
        )
    
    builder.row(
        types.InlineKeyboardButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
            callback_data="refresh_moderation")
    )
    
    msg = await message.answer(
        "‚è≥ <b>–û–∂–∏–¥–∞—é—â–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:</b>\n"
        f"–ù–∞–π–¥–µ–Ω–æ: {len(ads)}\n\n"
        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ–±—ä—è–≤–ª–µ–Ω–∏–π:",
        reply_markup=builder.as_markup()
    )
    await cleaner.add_message(message.chat.id, msg.message_id)

@admin_router.callback_query(F.data.startswith("approve_"))
async def approve_ad(callback: types.CallbackQuery, cleaner: MessageCleaner):
    """–û–¥–æ–±—Ä–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"""
    if not await is_admin(callback.from_user.id):
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
    
    ad_id = int(callback.data.split("_")[1])
    db = next(get_db())
    
    try:
        ad = db.get(Ad, ad_id)
        if not ad:
            return await callback.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        
        ad.status = "approved"
        ad.approved_at = datetime.utcnow()
        db.commit()
        
        try:
            await callback.bot.send_message(
                ad.user_id,
                f"‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad.id} –æ–¥–æ–±—Ä–µ–Ω–æ!\n"
                f"–ö–∞–Ω–∞–ª: {ad.channel}\n"
                f"–°—Ä–æ–∫: {ad.duration}\n\n"
                f"–¢–µ–∫—Å—Ç: {ad.text[:200]}..."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        await callback.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ")
        await moderate_ads(callback.message, cleaner)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

@admin_router.callback_query(F.data.startswith("reject_"))
async def reject_ad(callback: types.CallbackQuery, cleaner: MessageCleaner):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"""
    if not await is_admin(callback.from_user.id):
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
    
    ad_id = int(callback.data.split("_")[1])
    db = next(get_db())
    
    try:
        ad = db.get(Ad, ad_id)
        if not ad:
            return await callback.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        
        ad.status = "rejected"
        db.commit()
        
        try:
            await callback.bot.send_message(
                ad.user_id,
                f"‚ùå –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad.id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º\n\n"
                f"–¢–µ–∫—Å—Ç: {ad.text[:200]}..."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        await callback.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        await moderate_ads(callback.message, cleaner)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

@admin_router.callback_query(F.data == "refresh_moderation")
async def refresh_moderation(callback: types.CallbackQuery, cleaner: MessageCleaner):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    await callback.answer("–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫...")
    await moderate_ads(callback.message, cleaner)

@admin_router.message(F.text == "‚óÄÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é")
async def back_to_main(message: types.Message, state: FSMContext, cleaner: MessageCleaner):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await cleaner.clean_chat(message.bot, message.chat.id)
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard(await is_admin(message.from_user.id))
    )