from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import logging
from config.states import States
from config import settings, messages
from config.keyboard_layouts import get_main_menu, generate_channels_kb, generate_durations_kb
from config.states import States
from database.crud import get_or_create_user
from database.session import get_db
from services.message_cleaner import MessageCleaner
import asyncio

logger = logging.getLogger(__name__)
user_router = Router(name='user_router')

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@user_router.message(Command("start"))
async def cmd_start(message: types.Message, cleaner: MessageCleaner):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        await cleaner.clean_chat(message.bot, message.chat.id)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db = next(get_db())
        user = get_or_create_user(
            db,
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            full_name=message.from_user.full_name
        )
        
        logger.info(f"User {message.from_user.id} started the bot")
        
        await message.answer(
            messages.START,
            reply_markup=get_main_menu(message.from_user.id in settings.ADMIN_IDS)
        )
    except Exception as e:
        logger.error(f"Start command error: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

# –ù–∞–≤–∏–≥–∞—Ü–∏—è
@user_router.message(F.text == "‚óÄÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é")
@user_router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message, state: FSMContext, cleaner: MessageCleaner):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await cmd_start(message, cleaner)

# –ë–∞–ª–∞–Ω—Å –∏ –ø–ª–∞—Ç–µ–∂–∏
@user_router.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
@user_router.message(Command("payment"))
async def handle_payment(message: types.Message, state: FSMContext, cleaner: MessageCleaner):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º"""
    await cleaner.clean_chat(message.bot, message.chat.id)
    await state.clear()
    
    builder = ReplyKeyboardBuilder()
    builder.row(types.KeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"))
    builder.row(types.KeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π"))
    builder.row(types.KeyboardButton(text="‚óÄÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é"))
    
    await message.answer(
        "üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> 0 —Ä—É–±\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

@user_router.message(F.text == "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def process_payment(message: types.Message, cleaner: MessageCleaner):
    """–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
    await cleaner.clean_chat(message.bot, message.chat.id)
    
    builder = ReplyKeyboardBuilder()
    amounts = ["100 —Ä—É–±", "300 —Ä—É–±", "500 —Ä—É–±", "1000 —Ä—É–±"]
    for amount in amounts:
        builder.add(types.KeyboardButton(text=amount))
    builder.adjust(2)
    builder.row(types.KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥"))
    
    await message.answer(
        "üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

# –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã
@user_router.message(F.text == "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É")
async def start_ad(message: types.Message, state: FSMContext, bot: Bot, cleaner: MessageCleaner):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã"""
    try:
        await cleaner.clean_chat(bot, message.chat.id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        load_msg = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤...")
        await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        await bot.delete_message(message.chat.id, load_msg.message_id)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª
        await message.answer(
            messages.CHANNEL_CHOICE,
            reply_markup=generate_channels_kb()
        )
        await state.set_state(States.select_channel)
        
        logger.info(f"User {message.from_user.id} started ad placement")
    except Exception as e:
        logger.error(f"Ad start error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")

@user_router.message(States.select_channel, F.text.in_(settings.CHANNELS.keys()))
async def select_channel(message: types.Message, state: FSMContext, cleaner: MessageCleaner):
    """–í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã"""
    try:
        await cleaner.clean_chat(message.bot, message.chat.id)
        await state.update_data(channel=message.text)
        
        await message.answer(
            f"–í—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª: <b>{message.text}</b>\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:",
            reply_markup=generate_durations_kb()
        )
        await state.set_state(States.select_duration)
    except Exception as e:
        logger.error(f"Channel select error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–Ω–∞–ª–∞")

@user_router.message(States.select_channel)
async def invalid_channel(message: types.Message):
    """–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞"""
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
        reply_markup=generate_channels_kb()
    )

@user_router.message(States.select_duration, F.text.in_(settings.PRICES))
async def select_duration(message: types.Message, state: FSMContext, cleaner: MessageCleaner):
    """–í—ã–±–æ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
    try:
        data = await state.get_data()
        price_info = settings.PRICES[message.text]
        
        await cleaner.clean_chat(message.bot, message.chat.id)
        
        builder = ReplyKeyboardBuilder()
        builder.add(types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
        builder.row(types.KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥"))
        
        await message.answer(
            f"üìå <b>–í—ã –≤—ã–±—Ä–∞–ª–∏:</b>\n"
            f"–ö–∞–Ω–∞–ª: {data['channel']}\n"
            f"–°—Ä–æ–∫: {message.text}\n"
            f"–¶–µ–Ω–∞: {price_info['price']} —Ä—É–±.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )
        await state.update_data(
            duration=message.text, 
            price=price_info['price'],
            currency=price_info.get('currency', 'RUB')
        )
        await state.set_state(States.enter_media)
    except Exception as e:
        logger.error(f"Duration select error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ä–æ–∫–∞")

# –ú–µ–¥–∏–∞ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö
@user_router.message(States.enter_media, F.content_type.in_({'photo', 'video'}))
async def handle_ad_media(message: types.Message, state: FSMContext, cleaner: MessageCleaner):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    try:
        media_type = 'photo' if message.photo else 'video'
        media_id = message.photo[-1].file_id if message.photo else message.video.file_id
        
        await state.update_data(media_type=media_type, media_id=media_id)
        await cleaner.clean_chat(message.bot, message.chat.id)
        
        await message.answer(
            "üñºÔ∏è –ú–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(States.enter_text)
    except Exception as e:
        logger.error(f"Media upload error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞")

@user_router.message(States.enter_media, F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_media(message: types.Message, state: FSMContext, cleaner: MessageCleaner):
    """–ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞"""
    await cleaner.clean_chat(message.bot, message.chat.id)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(States.enter_text)

# –¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@user_router.message(States.enter_text)
async def process_ad_text(message: types.Message, state: FSMContext, cleaner: MessageCleaner):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    try:
        if len(message.text) > 500:
            return await message.answer("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤ 500 —Å–∏–º–≤–æ–ª–æ–≤")
        
        data = await state.get_data()
        await cleaner.clean_chat(message.bot, message.chat.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirmation_text = (
            "‚úÖ <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
            f"üì¢ –ö–∞–Ω–∞–ª: {data['channel']}\n"
            f"‚è≥ –°—Ä–æ–∫: {data['duration']}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {data['price']} {data['currency']}\n\n"
            f"üìù –¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n{message.text}\n\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞."
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        if 'media_id' in data:
            if data['media_type'] == 'photo':
                await message.bot.send_photo(
                    chat_id=message.chat.id,
                    photo=data['media_id'],
                    caption=confirmation_text
                )
            else:
                await message.bot.send_video(
                    chat_id=message.chat.id,
                    video=data['media_id'],
                    caption=confirmation_text
                )
        else:
            await message.answer(confirmation_text)
        
        await state.clear()
        await cmd_start(message, cleaner)
        
        logger.info(f"New ad created by {message.from_user.id}")
    except Exception as e:
        logger.error(f"Ad creation error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")

# –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π
@user_router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_ad(message: types.Message, state: FSMContext, cleaner: MessageCleaner):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    await state.clear()
    await cleaner.clean_chat(message.bot, message.chat.id)
    await message.answer(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_menu(message.from_user.id in settings.ADMIN_IDS)
    )